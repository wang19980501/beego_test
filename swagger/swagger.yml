swagger: "2.0"
info:
  title: mobile API
  description: mobile has every tool to get any job done, so codename for the new
    mobile APIs.
  version: 1.0.0
  contact:
    email: zhangzhongqiang@highsion.com
basePath: /paperless
paths:
  /dcp/LogIn:
    get:
      tags:
      - dcp
      description: get reflush
      operationId: DCPController.reflush
      responses:
        "200":
          description: '{int} models.User.Id'
        "404":
          description: User not found
  /dcp/Logout/:
    get:
      tags:
      - dcp
      description: get reflush
      operationId: DCPController.reflush
      responses:
        "200":
          description: '{string} string'
        "404":
          description: User not found
  /dcp/Reflush:
    post:
      tags:
      - dcp
      description: get reflush
      operationId: DCPController.reflush
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /home/:
    get:
      tags:
      - home
      description: Logs user into the system
      operationId: HomeController.Get
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /home/Get:
    post:
      tags:
      - home
      description: Logs user into the system
      operationId: HomeController.Get
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/add:
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/list:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
  /user/login:
    post:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Password:
        type: string
      Username:
        type: string
tags:
- name: user
  description: |
    Operations about Users
